@using DevExpViewer.Web.Reports
@using DevExpViewer.Web.Startup
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewBag.CurrentPageName = PageNames.About;
    ViewBag.Title = L("About");
}
<link rel="stylesheet" href="~/css/viewer.part.bundle.css" />
<script src="~/js/viewer.part.bundle.js"></script>
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
<script type="text/javascript">
    function SetupJwt(bearerToken, xsrf) {
        DevExpress.Analytics.Utils.ajaxSetup.ajaxSettings = {
            headers: {
                //'Authorization': 'Bearer ' + bearerToken,'
                'X-XSRF-TOKEN': xsrf
            }
        };
    }
    function AttachXSRFToken_OnExport(args, xsrf) {
        args.FormData["_RequestVerificationToken"] = xsrf;
    }
    function WebDocumentViewer_BeforeRender(s, e) {
        SetupJwt('bearer token can be passed here', "@GetAntiXsrfRequestToken()");
        $(window).on('beforeunload', function (e) {
            s.Close();
        });
    }
    function OnViewerExport(_s, e) {
        AttachXSRFToken_OnExport(e, "@GetAntiXsrfRequestToken()");
    }
</script>
<input type="hidden" id="RequestVerificationToken" name="RequestVerificationToken" value="@GetAntiXsrfRequestToken()">

    @{
    var viewerRender = Html.DevExpress().WebDocumentViewer("DocumentViewer").ClientSideEvents(x => { x.BeforeRender("WebDocumentViewer_BeforeRender"); x.OnExport("OnViewerExport"); }).Height("1000px").Bind(new TestReport());

    @viewerRender.RenderHtml()
    @viewerRender.RenderScripts()
}eport())